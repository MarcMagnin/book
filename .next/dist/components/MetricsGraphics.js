'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _metricsGraphics = require('metrics-graphics');

var _metricsGraphics2 = _interopRequireDefault(_metricsGraphics);

var _mobxReact = require('mobx-react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MG_ALLOWED_OPTIONS = ['axes_not_compact', 'european_clock', 'inflator', 'max_x', 'max_y', 'min_x', 'min_y', 'min_y_from_data', 'missing_text', 'show_missing_background', 'show_year_markers', 'show_years', 'show_secondary_x_label', 'small_text', 'xax_count', 'xax_format', 'x_axis', 'x_extended_ticks', 'x_label', 'x_scale_type', 'xax_start_at_min', 'xax_tick_length', 'xax_units', 'y_axis', 'y_extended_ticks', 'y_label', 'y_scale_type', 'yax_count', 'yax_format', 'yax_tick_length', 'yax_units', 'yax_units_append', 'aggregate_rollover', 'animate_on_load', 'area', 'baselines', 'chart_type', 'custom_line_color_map', 'decimals', 'error', 'format', 'full_height', 'full_width', 'interpolate', 'interpolate_tension', 'legend', 'legend_target', 'linked', 'linked_format', 'list', 'markers', 'max_data_size', 'mouseover', 'mousemove', 'mouseout', 'point_size', 'rollover_callback', 'show_confidence_band', 'show_rollover_text', 'show_tooltips', 'target', 'transition_on_update', 'x_rollover_format', 'x_rug', 'y_rollover_format', 'y_rug', 'data', 'missing_is_zero', 'missing_is_hidden', 'missing_is_hidden_accessor', 'utc_time', 'x_accessor', 'x_sort', 'y_accessor', 'buffer', 'bottom', 'center_title_full_width', 'height', 'left', 'right', 'small_height_threshold', 'small_width_threshold', 'top', 'width', 'color_accessor', 'color_range', 'color_type', 'point_size', 'size_accessor', 'size_range', 'lowess', 'ls', 'bar_margin', 'binned', 'bins', 'bar_height', 'bar_orientation', 'baseline_accessor', 'binned', 'dodge_accessor', 'outer_padding_percentage', 'padding_percentage', 'predictor_accessor', 'truncate_x_labels', 'truncate_y_labels', 'rotate_x_labels', 'rotate_y_labels'];
function getMGOptions(props) {
	var mgOptions = {},
	    x,
	    p;
	for (x = MG_ALLOWED_OPTIONS.length - 1; x >= 0; x--) {
		p = MG_ALLOWED_OPTIONS[x];
		if (props.hasOwnProperty(p)) {
			mgOptions[p] = props[p];
		}
	}
	return mgOptions;
}

var MetricsGraphics = (0, _mobxReact.observer)(_class = function (_React$Component) {
	(0, _inherits3.default)(MetricsGraphics, _React$Component);

	function MetricsGraphics(props) {
		(0, _classCallCheck3.default)(this, MetricsGraphics);

		var _this2 = (0, _possibleConstructorReturn3.default)(this, (MetricsGraphics.__proto__ || (0, _getPrototypeOf2.default)(MetricsGraphics)).call(this, props));

		_this2.mgData = {};
		return _this2;
	}

	(0, _createClass3.default)(MetricsGraphics, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.mgData = (0, _assign2.default)(this.mgData, getMGOptions(this.props));
			if (this.mgData.target) {
				delete this.mgData.xax_format;
				_metricsGraphics2.default.data_graphic(this.mgData);
			}
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {

			this.mgData = (0, _assign2.default)(this.mgData, getMGOptions(nextProps));
			if (this.mgData.target) {
				delete this.mgData.xax_format;
			}
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			console.log("WOOT,componentDidUpdate from CHART LIB");
			if (this.mgData.target) {
				console.log("MGDATA:", this.mgData);
				_metricsGraphics2.default.data_graphic(this.mgData);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this = this;
			return _react2.default.createElement('div', { className: 'metricsGraphicsCon', ref: function ref(c) {
					if (c != null) _this.mgData.target = c;
				} });
		}
	}]);
	return MetricsGraphics;
}(_react2.default.Component)) || _class;

MetricsGraphics.propTypes = {
	axes_not_compact: _react2.default.PropTypes.any, //determines whether to draw compact or non-compact axes
	european_clock: _react2.default.PropTypes.any, //determines whether to show labels using a 24-hour clock
	inflator: _react2.default.PropTypes.any, //a multiplier for inflating max_x and max_y
	max_x: _react2.default.PropTypes.any, //the maximum x-value
	max_y: _react2.default.PropTypes.any, //the maximum y-value
	min_x: _react2.default.PropTypes.any, //the minimum x-value
	min_y: _react2.default.PropTypes.any, //the minimum y-value
	min_y_from_data: _react2.default.PropTypes.any, //starts y-axis at data's minimum value
	missing_text: _react2.default.PropTypes.any, //The text to display for missing graphics
	show_missing_background: _react2.default.PropTypes.any, //Displays a background for missing graphics
	show_year_markers: _react2.default.PropTypes.any, //determines whether to show year markers along the x-axis
	show_years: _react2.default.PropTypes.any, //determines whether to show years along the x-axis
	show_secondary_x_label: _react2.default.PropTypes.any, //determines whether to show years along the x-axis
	small_text: _react2.default.PropTypes.any, //coerces small text regardless of graphic size
	xax_count: _react2.default.PropTypes.any, //the number of x-axis ticks
	xax_format: _react2.default.PropTypes.any, //a function that formats the x-axis' labels
	x_axis: _react2.default.PropTypes.any, //determines whether to display the x-axis
	x_extended_ticks: _react2.default.PropTypes.any, //determines whether to extend the x-axis ticks across the chart
	x_label: _react2.default.PropTypes.any, //the label to show below the x-axis
	x_scale_type: _react2.default.PropTypes.any, //the x-axis scale type
	xax_start_at_min: _react2.default.PropTypes.any, //starts the x-axis from the left-most edge
	xax_tick_length: _react2.default.PropTypes.any, //the x-axis' tick length in pixels
	xax_units: _react2.default.PropTypes.any, //a prefix symbol to be shown alongside the x-axis' labels
	y_axis: _react2.default.PropTypes.any, //determines whether to display the y-axis
	y_extended_ticks: _react2.default.PropTypes.any, //determines whether to extend the y-axis ticks across the chart
	y_label: _react2.default.PropTypes.any, //the label to show beside the y-axis
	y_scale_type: _react2.default.PropTypes.any, //the y-axis scale type
	yax_count: _react2.default.PropTypes.any, //the number of y-axis ticks
	yax_format: _react2.default.PropTypes.any, //a function that formats the y-axis' labels
	yax_tick_length: _react2.default.PropTypes.any, //the y-axis' tick length in pixels
	yax_units: _react2.default.PropTypes.any, //a prefix symbol to be shown alongside the y-axis' labels
	yax_units_append: _react2.default.PropTypes.any, //determines whether to append rather than prepend units
	aggregate_rollover: _react2.default.PropTypes.any, //links the lines in a multi-line graphic
	animate_on_load: _react2.default.PropTypes.any, //determines whether lines are transitioned on first-load
	area: _react2.default.PropTypes.any, //determines whether to fill the area below the line
	baselines: _react2.default.PropTypes.any, //horizontal lines that indicate, say, goals.
	chart_type: _react2.default.PropTypes.any, //{line, histogram, point, missing-data}
	custom_line_color_map: _react2.default.PropTypes.any, //maps an arbitrary set of lines to colors
	decimals: _react2.default.PropTypes.any, //the number of decimals to show in a rollover
	error: _react2.default.PropTypes.any, //does the graphic have an error that we want to communicate to users
	format: _react2.default.PropTypes.any, //the format of the data object (count or percentage)
	full_height: _react2.default.PropTypes.any, //sets height to that of the parent, adjusts dimensions on window resize
	full_width: _react2.default.PropTypes.any, //sets width to that of the parent, adjusts dimensions on window resize
	interpolate: _react2.default.PropTypes.any, //the interpolation function to use for rendering lines
	interpolate_tension: _react2.default.PropTypes.any, //increase the tension to fix artifacts when your data is irregular
	legend: _react2.default.PropTypes.any, //an array of literals used to label lines
	legend_target: _react2.default.PropTypes.any, //the DOM element to insert the legend in
	linked: _react2.default.PropTypes.any, //used to link multiple graphics together
	linked_format: _react2.default.PropTypes.any, //specifies the format of linked rollovers
	list: _react2.default.PropTypes.any, //automatically maps the data to x and y accessors
	markers: _react2.default.PropTypes.any, //vertical lines that indicate, say, milestones
	max_data_size: _react2.default.PropTypes.any, //for use with custom_line_color_map
	mouseover: _react2.default.PropTypes.any, //custom rollover function
	mousemove: _react2.default.PropTypes.any, //custom rollover function
	mouseout: _react2.default.PropTypes.any, //custom rollover function
	point_size: _react2.default.PropTypes.any, //the radius of the dot that appears over an active data point
	rollover_callback: _react2.default.PropTypes.any, //custom rollover function
	show_confidence_band: _react2.default.PropTypes.any, //determines whether to show a confidence band
	show_rollover_text: _react2.default.PropTypes.any, //determines whether to show text for a data point on rollover
	show_tooltips: _react2.default.PropTypes.any, //determines whether to display descriptions in tooltips
	target: _react2.default.PropTypes.any, //the DOM element to insert the graphic in
	transition_on_update: _react2.default.PropTypes.any, //gracefully transitions the lines on data change
	x_rollover_format: _react2.default.PropTypes.any, //a function or string that formats the y accessor's rollover text
	x_rug: _react2.default.PropTypes.any, //show a rug plot along the x-axis
	y_rollover_format: _react2.default.PropTypes.any, //a function or string that formats the y accessor's rollover text
	y_rug: _react2.default.PropTypes.any, //show a rug plot along the y-axis
	data: _react2.default.PropTypes.any, //the data object
	missing_is_zero: _react2.default.PropTypes.any, //assume missing observations are zero
	missing_is_hidden: _react2.default.PropTypes.any, //show missing observations as missing line segments
	missing_is_hidden_accessor: _react2.default.PropTypes.any, //the accessor for identifying observations as missing
	utc_time: _react2.default.PropTypes.any, //determines whether to use a UTC or local time scale
	x_accessor: _react2.default.PropTypes.any, //the data element that's the x-accessor
	x_sort: _react2.default.PropTypes.any, //determines whether to sort the x-axis' values
	y_accessor: _react2.default.PropTypes.any, //the data element that's the y-accessor
	buffer: _react2.default.PropTypes.any, //the padding around the graphic
	bottom: _react2.default.PropTypes.any, //the size of the bottom margin
	center_title_full_width: _react2.default.PropTypes.any, //center title over entire graph
	height: _react2.default.PropTypes.any, //the graphic's height
	left: _react2.default.PropTypes.any, //the size of the left margin
	right: _react2.default.PropTypes.any, //the size of the right margin
	small_height_threshold: _react2.default.PropTypes.any, //maximum height for a small graphic
	small_width_threshold: _react2.default.PropTypes.any, //maximum width for a small graphic
	top: _react2.default.PropTypes.any, //the size of the top margin
	width: _react2.default.PropTypes.any, //the graphic's width
	color_accessor: _react2.default.PropTypes.any, //the data element to use to map points to colors
	color_range: _react2.default.PropTypes.any, //the range used to color different groups of points
	color_type: _react2.default.PropTypes.any, //specifies whether the color scale is quantitative or qualitative
	size_accessor: _react2.default.PropTypes.any, //should point sizes be mapped to data
	size_range: _react2.default.PropTypes.any, //the range of point sizes
	lowess: _react2.default.PropTypes.any, //specifies whether to show a lowess line of best-fit
	ls: _react2.default.PropTypes.any, //specifies whether to show a least-squares line of best-fit
	bar_margin: _react2.default.PropTypes.any, //the margin between bars
	binned: _react2.default.PropTypes.any, //specifies whether the histogram data is already binned
	bins: _react2.default.PropTypes.any, //the number of bins to use
	bar_height: _react2.default.PropTypes.any, //bar height in pixels
	bar_orientation: _react2.default.PropTypes.any, //determines whether to show a vertical or horizontal barplot
	baseline_accessor: _react2.default.PropTypes.any, //the data element to map the baseline component to
	dodge_accessor: _react2.default.PropTypes.any, //the data element to map the dodge component to
	outer_padding_percentage: _react2.default.PropTypes.any, //outer_padding_percentage
	padding_percentage: _react2.default.PropTypes.any, //padding_percentage
	predictor_accessor: _react2.default.PropTypes.any, //the data element to map the predictor component to
	truncate_x_labels: _react2.default.PropTypes.any, //truncate_x_labels
	truncate_y_labels: _react2.default.PropTypes.any, //truncate_y_labels
	rotate_x_labels: _react2.default.PropTypes.any, //The number of degrees to rotate the x-axis' labels.
	rotate_y_labels: _react2.default.PropTypes.any };

exports.default = MetricsGraphics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvTWV0cmljc0dyYXBoaWNzLmpzIl0sIm5hbWVzIjpbIk1HX0FMTE9XRURfT1BUSU9OUyIsImdldE1HT3B0aW9ucyIsInByb3BzIiwibWdPcHRpb25zIiwieCIsInAiLCJsZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsIk1ldHJpY3NHcmFwaGljcyIsIm1nRGF0YSIsInRhcmdldCIsInhheF9mb3JtYXQiLCJkYXRhX2dyYXBoaWMiLCJuZXh0UHJvcHMiLCJjb25zb2xlIiwibG9nIiwiX3RoaXMiLCJjIiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiYXhlc19ub3RfY29tcGFjdCIsIlByb3BUeXBlcyIsImFueSIsImV1cm9wZWFuX2Nsb2NrIiwiaW5mbGF0b3IiLCJtYXhfeCIsIm1heF95IiwibWluX3giLCJtaW5feSIsIm1pbl95X2Zyb21fZGF0YSIsIm1pc3NpbmdfdGV4dCIsInNob3dfbWlzc2luZ19iYWNrZ3JvdW5kIiwic2hvd195ZWFyX21hcmtlcnMiLCJzaG93X3llYXJzIiwic2hvd19zZWNvbmRhcnlfeF9sYWJlbCIsInNtYWxsX3RleHQiLCJ4YXhfY291bnQiLCJ4X2F4aXMiLCJ4X2V4dGVuZGVkX3RpY2tzIiwieF9sYWJlbCIsInhfc2NhbGVfdHlwZSIsInhheF9zdGFydF9hdF9taW4iLCJ4YXhfdGlja19sZW5ndGgiLCJ4YXhfdW5pdHMiLCJ5X2F4aXMiLCJ5X2V4dGVuZGVkX3RpY2tzIiwieV9sYWJlbCIsInlfc2NhbGVfdHlwZSIsInlheF9jb3VudCIsInlheF9mb3JtYXQiLCJ5YXhfdGlja19sZW5ndGgiLCJ5YXhfdW5pdHMiLCJ5YXhfdW5pdHNfYXBwZW5kIiwiYWdncmVnYXRlX3JvbGxvdmVyIiwiYW5pbWF0ZV9vbl9sb2FkIiwiYXJlYSIsImJhc2VsaW5lcyIsImNoYXJ0X3R5cGUiLCJjdXN0b21fbGluZV9jb2xvcl9tYXAiLCJkZWNpbWFscyIsImVycm9yIiwiZm9ybWF0IiwiZnVsbF9oZWlnaHQiLCJmdWxsX3dpZHRoIiwiaW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZV90ZW5zaW9uIiwibGVnZW5kIiwibGVnZW5kX3RhcmdldCIsImxpbmtlZCIsImxpbmtlZF9mb3JtYXQiLCJsaXN0IiwibWFya2VycyIsIm1heF9kYXRhX3NpemUiLCJtb3VzZW92ZXIiLCJtb3VzZW1vdmUiLCJtb3VzZW91dCIsInBvaW50X3NpemUiLCJyb2xsb3Zlcl9jYWxsYmFjayIsInNob3dfY29uZmlkZW5jZV9iYW5kIiwic2hvd19yb2xsb3Zlcl90ZXh0Iiwic2hvd190b29sdGlwcyIsInRyYW5zaXRpb25fb25fdXBkYXRlIiwieF9yb2xsb3Zlcl9mb3JtYXQiLCJ4X3J1ZyIsInlfcm9sbG92ZXJfZm9ybWF0IiwieV9ydWciLCJkYXRhIiwibWlzc2luZ19pc196ZXJvIiwibWlzc2luZ19pc19oaWRkZW4iLCJtaXNzaW5nX2lzX2hpZGRlbl9hY2Nlc3NvciIsInV0Y190aW1lIiwieF9hY2Nlc3NvciIsInhfc29ydCIsInlfYWNjZXNzb3IiLCJidWZmZXIiLCJib3R0b20iLCJjZW50ZXJfdGl0bGVfZnVsbF93aWR0aCIsImhlaWdodCIsImxlZnQiLCJyaWdodCIsInNtYWxsX2hlaWdodF90aHJlc2hvbGQiLCJzbWFsbF93aWR0aF90aHJlc2hvbGQiLCJ0b3AiLCJ3aWR0aCIsImNvbG9yX2FjY2Vzc29yIiwiY29sb3JfcmFuZ2UiLCJjb2xvcl90eXBlIiwic2l6ZV9hY2Nlc3NvciIsInNpemVfcmFuZ2UiLCJsb3dlc3MiLCJscyIsImJhcl9tYXJnaW4iLCJiaW5uZWQiLCJiaW5zIiwiYmFyX2hlaWdodCIsImJhcl9vcmllbnRhdGlvbiIsImJhc2VsaW5lX2FjY2Vzc29yIiwiZG9kZ2VfYWNjZXNzb3IiLCJvdXRlcl9wYWRkaW5nX3BlcmNlbnRhZ2UiLCJwYWRkaW5nX3BlcmNlbnRhZ2UiLCJwcmVkaWN0b3JfYWNjZXNzb3IiLCJ0cnVuY2F0ZV94X2xhYmVscyIsInRydW5jYXRlX3lfbGFiZWxzIiwicm90YXRlX3hfbGFiZWxzIiwicm90YXRlX3lf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bkdoQixFQW1HcUI7QUFDOUNpRyxxQkFBbUIsZ0JBQU1sRyxTQUFOLENBQWdCQyxHQXBHVixFQW9HZTtBQUN4Q2tHLHFCQUFtQixnQkFBTW5HLFNBQU4sQ0FBZ0JDLEdBckdWLEVBcUdlO0FBQ3hDbUcsb0JBQWtCLGdCQUFNcEcsU0FBTixDQUFnQkMsR0F0R1QsRUFzR2M7QUFDdkNvRyxvQkFBa0IsZ0JBQU1yRyxTQUFOLENBQWdCQyxHQXZHVCxFQXVHYztBQUN2Q3FHLGtCQUFnQixnQkFBTXRHLFNBQU4sQ0FBZ0JDLEdBeEdQLEVBd0dZO0FBQ3JDc0csa0JBQWdCLGdCQUFNdkcsU0FBTixDQUFnQkMsR0F6R1AsRUFBMUI7O2tCQTRHZWQsZSIsImZpbGUiOiJNZXRyaWNzR3JhcGhpY3MuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvbWFyYy93ZWJkZXYvYm9vayIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTUcgZnJvbSAnbWV0cmljcy1ncmFwaGljcyc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5jb25zdCBNR19BTExPV0VEX09QVElPTlM9WydheGVzX25vdF9jb21wYWN0JywgJ2V1cm9wZWFuX2Nsb2NrJywgJ2luZmxhdG9yJywgJ21heF94JywgJ21heF95JywgJ21pbl94JywgJ21pbl95JywgJ21pbl95X2Zyb21fZGF0YScsICdtaXNzaW5nX3RleHQnLCAnc2hvd19taXNzaW5nX2JhY2tncm91bmQnLCAnc2hvd195ZWFyX21hcmtlcnMnLCAnc2hvd195ZWFycycsICdzaG93X3NlY29uZGFyeV94X2xhYmVsJywgJ3NtYWxsX3RleHQnLCAneGF4X2NvdW50JywgJ3hheF9mb3JtYXQnLCAneF9heGlzJywgJ3hfZXh0ZW5kZWRfdGlja3MnLCAneF9sYWJlbCcsICd4X3NjYWxlX3R5cGUnLCAneGF4X3N0YXJ0X2F0X21pbicsICd4YXhfdGlja19sZW5ndGgnLCAneGF4X3VuaXRzJywgJ3lfYXhpcycsICd5X2V4dGVuZGVkX3RpY2tzJywgJ3lfbGFiZWwnLCAneV9zY2FsZV90eXBlJywgJ3lheF9jb3VudCcsICd5YXhfZm9ybWF0JywgJ3lheF90aWNrX2xlbmd0aCcsICd5YXhfdW5pdHMnLCAneWF4X3VuaXRzX2FwcGVuZCcsICdhZ2dyZWdhdGVfcm9sbG92ZXInLCAnYW5pbWF0ZV9vbl9sb2FkJywgJ2FyZWEnLCAnYmFzZWxpbmVzJywgJ2NoYXJ0X3R5cGUnLCAnY3VzdG9tX2xpbmVfY29sb3JfbWFwJywgJ2RlY2ltYWxzJywgJ2Vycm9yJywgJ2Zvcm1hdCcsICdmdWxsX2hlaWdodCcsICdmdWxsX3dpZHRoJywgJ2ludGVycG9sYXRlJywgJ2ludGVycG9sYXRlX3RlbnNpb24nLCAnbGVnZW5kJywgJ2xlZ2VuZF90YXJnZXQnLCAnbGlua2VkJywgJ2xpbmtlZF9mb3JtYXQnLCAnbGlzdCcsICdtYXJrZXJzJywgJ21heF9kYXRhX3NpemUnLCAnbW91c2VvdmVyJywgJ21vdXNlbW92ZScsICdtb3VzZW91dCcsICdwb2ludF9zaXplJywgJ3JvbGxvdmVyX2NhbGxiYWNrJywgJ3Nob3dfY29uZmlkZW5jZV9iYW5kJywgJ3Nob3dfcm9sbG92ZXJfdGV4dCcsICdzaG93X3Rvb2x0aXBzJywgJ3RhcmdldCcsICd0cmFuc2l0aW9uX29uX3VwZGF0ZScsICd4X3JvbGxvdmVyX2Zvcm1hdCcsICd4X3J1ZycsICd5X3JvbGxvdmVyX2Zvcm1hdCcsICd5X3J1ZycsICdkYXRhJywgJ21pc3NpbmdfaXNfemVybycsICdtaXNzaW5nX2lzX2hpZGRlbicsICdtaXNzaW5nX2lzX2hpZGRlbl9hY2Nlc3NvcicsICd1dGNfdGltZScsICd4X2FjY2Vzc29yJywgJ3hfc29ydCcsICd5X2FjY2Vzc29yJywgJ2J1ZmZlcicsICdib3R0b20nLCAnY2VudGVyX3RpdGxlX2Z1bGxfd2lkdGgnLCAnaGVpZ2h0JywgJ2xlZnQnLCAncmlnaHQnLCAnc21hbGxfaGVpZ2h0X3RocmVzaG9sZCcsICdzbWFsbF93aWR0aF90aHJlc2hvbGQnLCAndG9wJywgJ3dpZHRoJywgJ2NvbG9yX2FjY2Vzc29yJywgJ2NvbG9yX3JhbmdlJywgJ2NvbG9yX3R5cGUnLCAncG9pbnRfc2l6ZScsICdzaXplX2FjY2Vzc29yJywgJ3NpemVfcmFuZ2UnLCAnbG93ZXNzJywgJ2xzJywgJ2Jhcl9tYXJnaW4nLCAnYmlubmVkJywgJ2JpbnMnLCAnYmFyX2hlaWdodCcsICdiYXJfb3JpZW50YXRpb24nLCAnYmFzZWxpbmVfYWNjZXNzb3InLCAnYmlubmVkJywgJ2RvZGdlX2FjY2Vzc29yJywgJ291dGVyX3BhZGRpbmdfcGVyY2VudGFnZScsICdwYWRkaW5nX3BlcmNlbnRhZ2UnLCAncHJlZGljdG9yX2FjY2Vzc29yJywgJ3RydW5jYXRlX3hfbGFiZWxzJywgJ3RydW5jYXRlX3lfbGFiZWxzJywgJ3JvdGF0ZV94X2xhYmVscycsICdyb3RhdGVfeV9sYWJlbHMnXTtcbmZ1bmN0aW9uIGdldE1HT3B0aW9ucyhwcm9wcyl7XG5cdHZhciBtZ09wdGlvbnM9e30seCxwO1xuXHRmb3IoeD1NR19BTExPV0VEX09QVElPTlMubGVuZ3RoLTE7eD49MDt4LS0pe1xuXHRcdHA9TUdfQUxMT1dFRF9PUFRJT05TW3hdO1xuXHRcdGlmKHByb3BzLmhhc093blByb3BlcnR5KHApKXtcblx0XHRcdG1nT3B0aW9uc1twXT1wcm9wc1twXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1nT3B0aW9ucztcbn1cblxuQG9ic2VydmVyXG5jbGFzcyBNZXRyaWNzR3JhcGhpY3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXHRjb25zdHJ1Y3Rvcihwcm9wcyl7XG5cdFx0c3VwZXIocHJvcHMpO1xuXHRcdHRoaXMubWdEYXRhPXt9O1xuXHR9XG5cdGNvbXBvbmVudERpZE1vdW50KCl7XG5cdFx0dGhpcy5tZ0RhdGE9T2JqZWN0LmFzc2lnbih0aGlzLm1nRGF0YSxnZXRNR09wdGlvbnModGhpcy5wcm9wcykpO1xuXHRcdGlmKHRoaXMubWdEYXRhLnRhcmdldCl7XG5cdFx0XHRkZWxldGUgdGhpcy5tZ0RhdGEueGF4X2Zvcm1hdDtcblx0XHRcdE1HLmRhdGFfZ3JhcGhpYyh0aGlzLm1nRGF0YSk7XG5cdFx0fVxuXG5cdH1cblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpe1xuXHRcdFxuXHRcdHRoaXMubWdEYXRhPU9iamVjdC5hc3NpZ24odGhpcy5tZ0RhdGEsZ2V0TUdPcHRpb25zKG5leHRQcm9wcykpO1xuXHRcdGlmKHRoaXMubWdEYXRhLnRhcmdldCl7XG5cdFx0XHRkZWxldGUgdGhpcy5tZ0RhdGEueGF4X2Zvcm1hdDtcblx0XHR9XG5cblx0fVxuXHRjb21wb25lbnREaWRVcGRhdGUoKXtcblx0XHQgICBjb25zb2xlLmxvZyhcIldPT1QsY29tcG9uZW50RGlkVXBkYXRlIGZyb20gQ0hBUlQgTElCXCIpXG5cdFx0aWYodGhpcy5tZ0RhdGEudGFyZ2V0KXtcblx0XHRcdGNvbnNvbGUubG9nKFwiTUdEQVRBOlwiICx0aGlzLm1nRGF0YSlcblx0XHRcdE1HLmRhdGFfZ3JhcGhpYyh0aGlzLm1nRGF0YSk7XG5cdFx0fVxuXHR9XG5cdHJlbmRlcigpe1xuXHRcdGNvbnN0IF90aGlzPXRoaXM7XG5cdFx0cmV0dXJuKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJtZXRyaWNzR3JhcGhpY3NDb25cIiByZWY9eyAoYykgPT57IGlmKGMhPW51bGwpIF90aGlzLm1nRGF0YS50YXJnZXQ9YzsgfSB9PjwvZGl2PlxuXHRcdCk7XG5cdFx0XG5cdH1cbn1cblxuTWV0cmljc0dyYXBoaWNzLnByb3BUeXBlcz17XG5cdGF4ZXNfbm90X2NvbXBhY3Q6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gZHJhdyBjb21wYWN0IG9yIG5vbi1jb21wYWN0IGF4ZXNcblx0ZXVyb3BlYW5fY2xvY2s6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyBsYWJlbHMgdXNpbmcgYSAyNC1ob3VyIGNsb2NrXG5cdGluZmxhdG9yOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vYSBtdWx0aXBsaWVyIGZvciBpbmZsYXRpbmcgbWF4X3ggYW5kIG1heF95XG5cdG1heF94OlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIG1heGltdW0geC12YWx1ZVxuXHRtYXhfeTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBtYXhpbXVtIHktdmFsdWVcblx0bWluX3g6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgbWluaW11bSB4LXZhbHVlXG5cdG1pbl95OlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIG1pbmltdW0geS12YWx1ZVxuXHRtaW5feV9mcm9tX2RhdGE6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zdGFydHMgeS1heGlzIGF0IGRhdGEncyBtaW5pbXVtIHZhbHVlXG5cdG1pc3NpbmdfdGV4dDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL1RoZSB0ZXh0IHRvIGRpc3BsYXkgZm9yIG1pc3NpbmcgZ3JhcGhpY3Ncblx0c2hvd19taXNzaW5nX2JhY2tncm91bmQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9EaXNwbGF5cyBhIGJhY2tncm91bmQgZm9yIG1pc3NpbmcgZ3JhcGhpY3Ncblx0c2hvd195ZWFyX21hcmtlcnM6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyB5ZWFyIG1hcmtlcnMgYWxvbmcgdGhlIHgtYXhpc1xuXHRzaG93X3llYXJzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHNob3cgeWVhcnMgYWxvbmcgdGhlIHgtYXhpc1xuXHRzaG93X3NlY29uZGFyeV94X2xhYmVsOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHNob3cgeWVhcnMgYWxvbmcgdGhlIHgtYXhpc1xuXHRzbWFsbF90ZXh0OlJlYWN0LlByb3BUeXBlcy5hbnksIC8vY29lcmNlcyBzbWFsbCB0ZXh0IHJlZ2FyZGxlc3Mgb2YgZ3JhcGhpYyBzaXplXG5cdHhheF9jb3VudDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBudW1iZXIgb2YgeC1heGlzIHRpY2tzXG5cdHhheF9mb3JtYXQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hIGZ1bmN0aW9uIHRoYXQgZm9ybWF0cyB0aGUgeC1heGlzJyBsYWJlbHNcblx0eF9heGlzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRpc3BsYXkgdGhlIHgtYXhpc1xuXHR4X2V4dGVuZGVkX3RpY2tzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGV4dGVuZCB0aGUgeC1heGlzIHRpY2tzIGFjcm9zcyB0aGUgY2hhcnRcblx0eF9sYWJlbDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBsYWJlbCB0byBzaG93IGJlbG93IHRoZSB4LWF4aXNcblx0eF9zY2FsZV90eXBlOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIHgtYXhpcyBzY2FsZSB0eXBlXG5cdHhheF9zdGFydF9hdF9taW46UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zdGFydHMgdGhlIHgtYXhpcyBmcm9tIHRoZSBsZWZ0LW1vc3QgZWRnZVxuXHR4YXhfdGlja19sZW5ndGg6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgeC1heGlzJyB0aWNrIGxlbmd0aCBpbiBwaXhlbHNcblx0eGF4X3VuaXRzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vYSBwcmVmaXggc3ltYm9sIHRvIGJlIHNob3duIGFsb25nc2lkZSB0aGUgeC1heGlzJyBsYWJlbHNcblx0eV9heGlzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRpc3BsYXkgdGhlIHktYXhpc1xuXHR5X2V4dGVuZGVkX3RpY2tzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGV4dGVuZCB0aGUgeS1heGlzIHRpY2tzIGFjcm9zcyB0aGUgY2hhcnRcblx0eV9sYWJlbDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBsYWJlbCB0byBzaG93IGJlc2lkZSB0aGUgeS1heGlzXG5cdHlfc2NhbGVfdHlwZTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSB5LWF4aXMgc2NhbGUgdHlwZVxuXHR5YXhfY291bnQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgbnVtYmVyIG9mIHktYXhpcyB0aWNrc1xuXHR5YXhfZm9ybWF0OlJlYWN0LlByb3BUeXBlcy5hbnksIC8vYSBmdW5jdGlvbiB0aGF0IGZvcm1hdHMgdGhlIHktYXhpcycgbGFiZWxzXG5cdHlheF90aWNrX2xlbmd0aDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSB5LWF4aXMnIHRpY2sgbGVuZ3RoIGluIHBpeGVsc1xuXHR5YXhfdW5pdHM6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hIHByZWZpeCBzeW1ib2wgdG8gYmUgc2hvd24gYWxvbmdzaWRlIHRoZSB5LWF4aXMnIGxhYmVsc1xuXHR5YXhfdW5pdHNfYXBwZW5kOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGFwcGVuZCByYXRoZXIgdGhhbiBwcmVwZW5kIHVuaXRzXG5cdGFnZ3JlZ2F0ZV9yb2xsb3ZlcjpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL2xpbmtzIHRoZSBsaW5lcyBpbiBhIG11bHRpLWxpbmUgZ3JhcGhpY1xuXHRhbmltYXRlX29uX2xvYWQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgbGluZXMgYXJlIHRyYW5zaXRpb25lZCBvbiBmaXJzdC1sb2FkXG5cdGFyZWE6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gZmlsbCB0aGUgYXJlYSBiZWxvdyB0aGUgbGluZVxuXHRiYXNlbGluZXM6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9ob3Jpem9udGFsIGxpbmVzIHRoYXQgaW5kaWNhdGUsIHNheSwgZ29hbHMuXG5cdGNoYXJ0X3R5cGU6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy97bGluZSwgaGlzdG9ncmFtLCBwb2ludCwgbWlzc2luZy1kYXRhfVxuXHRjdXN0b21fbGluZV9jb2xvcl9tYXA6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9tYXBzIGFuIGFyYml0cmFyeSBzZXQgb2YgbGluZXMgdG8gY29sb3JzXG5cdGRlY2ltYWxzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIG51bWJlciBvZiBkZWNpbWFscyB0byBzaG93IGluIGEgcm9sbG92ZXJcblx0ZXJyb3I6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kb2VzIHRoZSBncmFwaGljIGhhdmUgYW4gZXJyb3IgdGhhdCB3ZSB3YW50IHRvIGNvbW11bmljYXRlIHRvIHVzZXJzXG5cdGZvcm1hdDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBmb3JtYXQgb2YgdGhlIGRhdGEgb2JqZWN0IChjb3VudCBvciBwZXJjZW50YWdlKVxuXHRmdWxsX2hlaWdodDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3NldHMgaGVpZ2h0IHRvIHRoYXQgb2YgdGhlIHBhcmVudCwgYWRqdXN0cyBkaW1lbnNpb25zIG9uIHdpbmRvdyByZXNpemVcblx0ZnVsbF93aWR0aDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3NldHMgd2lkdGggdG8gdGhhdCBvZiB0aGUgcGFyZW50LCBhZGp1c3RzIGRpbWVuc2lvbnMgb24gd2luZG93IHJlc2l6ZVxuXHRpbnRlcnBvbGF0ZTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxpbmVzXG5cdGludGVycG9sYXRlX3RlbnNpb246UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9pbmNyZWFzZSB0aGUgdGVuc2lvbiB0byBmaXggYXJ0aWZhY3RzIHdoZW4geW91ciBkYXRhIGlzIGlycmVndWxhclxuXHRsZWdlbmQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hbiBhcnJheSBvZiBsaXRlcmFscyB1c2VkIHRvIGxhYmVsIGxpbmVzXG5cdGxlZ2VuZF90YXJnZXQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgRE9NIGVsZW1lbnQgdG8gaW5zZXJ0IHRoZSBsZWdlbmQgaW5cblx0bGlua2VkOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdXNlZCB0byBsaW5rIG11bHRpcGxlIGdyYXBoaWNzIHRvZ2V0aGVyXG5cdGxpbmtlZF9mb3JtYXQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zcGVjaWZpZXMgdGhlIGZvcm1hdCBvZiBsaW5rZWQgcm9sbG92ZXJzXG5cdGxpc3Q6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hdXRvbWF0aWNhbGx5IG1hcHMgdGhlIGRhdGEgdG8geCBhbmQgeSBhY2Nlc3NvcnNcblx0bWFya2VyczpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3ZlcnRpY2FsIGxpbmVzIHRoYXQgaW5kaWNhdGUsIHNheSwgbWlsZXN0b25lc1xuXHRtYXhfZGF0YV9zaXplOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZm9yIHVzZSB3aXRoIGN1c3RvbV9saW5lX2NvbG9yX21hcFxuXHRtb3VzZW92ZXI6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9jdXN0b20gcm9sbG92ZXIgZnVuY3Rpb25cblx0bW91c2Vtb3ZlOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vY3VzdG9tIHJvbGxvdmVyIGZ1bmN0aW9uXG5cdG1vdXNlb3V0OlJlYWN0LlByb3BUeXBlcy5hbnksIC8vY3VzdG9tIHJvbGxvdmVyIGZ1bmN0aW9uXG5cdHBvaW50X3NpemU6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgcmFkaXVzIG9mIHRoZSBkb3QgdGhhdCBhcHBlYXJzIG92ZXIgYW4gYWN0aXZlIGRhdGEgcG9pbnRcblx0cm9sbG92ZXJfY2FsbGJhY2s6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9jdXN0b20gcm9sbG92ZXIgZnVuY3Rpb25cblx0c2hvd19jb25maWRlbmNlX2JhbmQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyBhIGNvbmZpZGVuY2UgYmFuZFxuXHRzaG93X3JvbGxvdmVyX3RleHQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyB0ZXh0IGZvciBhIGRhdGEgcG9pbnQgb24gcm9sbG92ZXJcblx0c2hvd190b29sdGlwczpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL2RldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IGRlc2NyaXB0aW9ucyBpbiB0b29sdGlwc1xuXHR0YXJnZXQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgRE9NIGVsZW1lbnQgdG8gaW5zZXJ0IHRoZSBncmFwaGljIGluXG5cdHRyYW5zaXRpb25fb25fdXBkYXRlOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vZ3JhY2VmdWxseSB0cmFuc2l0aW9ucyB0aGUgbGluZXMgb24gZGF0YSBjaGFuZ2Vcblx0eF9yb2xsb3Zlcl9mb3JtYXQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hIGZ1bmN0aW9uIG9yIHN0cmluZyB0aGF0IGZvcm1hdHMgdGhlIHkgYWNjZXNzb3IncyByb2xsb3ZlciB0ZXh0XG5cdHhfcnVnOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vc2hvdyBhIHJ1ZyBwbG90IGFsb25nIHRoZSB4LWF4aXNcblx0eV9yb2xsb3Zlcl9mb3JtYXQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hIGZ1bmN0aW9uIG9yIHN0cmluZyB0aGF0IGZvcm1hdHMgdGhlIHkgYWNjZXNzb3IncyByb2xsb3ZlciB0ZXh0XG5cdHlfcnVnOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vc2hvdyBhIHJ1ZyBwbG90IGFsb25nIHRoZSB5LWF4aXNcblx0ZGF0YTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBkYXRhIG9iamVjdFxuXHRtaXNzaW5nX2lzX3plcm86UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9hc3N1bWUgbWlzc2luZyBvYnNlcnZhdGlvbnMgYXJlIHplcm9cblx0bWlzc2luZ19pc19oaWRkZW46UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zaG93IG1pc3Npbmcgb2JzZXJ2YXRpb25zIGFzIG1pc3NpbmcgbGluZSBzZWdtZW50c1xuXHRtaXNzaW5nX2lzX2hpZGRlbl9hY2Nlc3NvcjpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBhY2Nlc3NvciBmb3IgaWRlbnRpZnlpbmcgb2JzZXJ2YXRpb25zIGFzIG1pc3Npbmdcblx0dXRjX3RpbWU6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9kZXRlcm1pbmVzIHdoZXRoZXIgdG8gdXNlIGEgVVRDIG9yIGxvY2FsIHRpbWUgc2NhbGVcblx0eF9hY2Nlc3NvcjpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBkYXRhIGVsZW1lbnQgdGhhdCdzIHRoZSB4LWFjY2Vzc29yXG5cdHhfc29ydDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL2RldGVybWluZXMgd2hldGhlciB0byBzb3J0IHRoZSB4LWF4aXMnIHZhbHVlc1xuXHR5X2FjY2Vzc29yOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIGRhdGEgZWxlbWVudCB0aGF0J3MgdGhlIHktYWNjZXNzb3Jcblx0YnVmZmVyOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIHBhZGRpbmcgYXJvdW5kIHRoZSBncmFwaGljXG5cdGJvdHRvbTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBzaXplIG9mIHRoZSBib3R0b20gbWFyZ2luXG5cdGNlbnRlcl90aXRsZV9mdWxsX3dpZHRoOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vY2VudGVyIHRpdGxlIG92ZXIgZW50aXJlIGdyYXBoXG5cdGhlaWdodDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBncmFwaGljJ3MgaGVpZ2h0XG5cdGxlZnQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgc2l6ZSBvZiB0aGUgbGVmdCBtYXJnaW5cblx0cmlnaHQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgc2l6ZSBvZiB0aGUgcmlnaHQgbWFyZ2luXG5cdHNtYWxsX2hlaWdodF90aHJlc2hvbGQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9tYXhpbXVtIGhlaWdodCBmb3IgYSBzbWFsbCBncmFwaGljXG5cdHNtYWxsX3dpZHRoX3RocmVzaG9sZDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL21heGltdW0gd2lkdGggZm9yIGEgc21hbGwgZ3JhcGhpY1xuXHR0b3A6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgc2l6ZSBvZiB0aGUgdG9wIG1hcmdpblxuXHR3aWR0aDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBncmFwaGljJ3Mgd2lkdGhcblx0Y29sb3JfYWNjZXNzb3I6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgZGF0YSBlbGVtZW50IHRvIHVzZSB0byBtYXAgcG9pbnRzIHRvIGNvbG9yc1xuXHRjb2xvcl9yYW5nZTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSByYW5nZSB1c2VkIHRvIGNvbG9yIGRpZmZlcmVudCBncm91cHMgb2YgcG9pbnRzXG5cdGNvbG9yX3R5cGU6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zcGVjaWZpZXMgd2hldGhlciB0aGUgY29sb3Igc2NhbGUgaXMgcXVhbnRpdGF0aXZlIG9yIHF1YWxpdGF0aXZlXG5cdHNpemVfYWNjZXNzb3I6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zaG91bGQgcG9pbnQgc2l6ZXMgYmUgbWFwcGVkIHRvIGRhdGFcblx0c2l6ZV9yYW5nZTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSByYW5nZSBvZiBwb2ludCBzaXplc1xuXHRsb3dlc3M6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zcGVjaWZpZXMgd2hldGhlciB0byBzaG93IGEgbG93ZXNzIGxpbmUgb2YgYmVzdC1maXRcblx0bHM6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zcGVjaWZpZXMgd2hldGhlciB0byBzaG93IGEgbGVhc3Qtc3F1YXJlcyBsaW5lIG9mIGJlc3QtZml0XG5cdGJhcl9tYXJnaW46UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgbWFyZ2luIGJldHdlZW4gYmFyc1xuXHRiaW5uZWQ6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy9zcGVjaWZpZXMgd2hldGhlciB0aGUgaGlzdG9ncmFtIGRhdGEgaXMgYWxyZWFkeSBiaW5uZWRcblx0YmluczpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBudW1iZXIgb2YgYmlucyB0byB1c2Vcblx0YmFyX2hlaWdodDpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL2JhciBoZWlnaHQgaW4gcGl4ZWxzXG5cdGJhcl9vcmllbnRhdGlvbjpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL2RldGVybWluZXMgd2hldGhlciB0byBzaG93IGEgdmVydGljYWwgb3IgaG9yaXpvbnRhbCBiYXJwbG90XG5cdGJhc2VsaW5lX2FjY2Vzc29yOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdGhlIGRhdGEgZWxlbWVudCB0byBtYXAgdGhlIGJhc2VsaW5lIGNvbXBvbmVudCB0b1xuXHRkb2RnZV9hY2Nlc3NvcjpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RoZSBkYXRhIGVsZW1lbnQgdG8gbWFwIHRoZSBkb2RnZSBjb21wb25lbnQgdG9cblx0b3V0ZXJfcGFkZGluZ19wZXJjZW50YWdlOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vb3V0ZXJfcGFkZGluZ19wZXJjZW50YWdlXG5cdHBhZGRpbmdfcGVyY2VudGFnZTpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3BhZGRpbmdfcGVyY2VudGFnZVxuXHRwcmVkaWN0b3JfYWNjZXNzb3I6UmVhY3QuUHJvcFR5cGVzLmFueSwgLy90aGUgZGF0YSBlbGVtZW50IHRvIG1hcCB0aGUgcHJlZGljdG9yIGNvbXBvbmVudCB0b1xuXHR0cnVuY2F0ZV94X2xhYmVsczpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL3RydW5jYXRlX3hfbGFiZWxzXG5cdHRydW5jYXRlX3lfbGFiZWxzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vdHJ1bmNhdGVfeV9sYWJlbHNcblx0cm90YXRlX3hfbGFiZWxzOlJlYWN0LlByb3BUeXBlcy5hbnksIC8vVGhlIG51bWJlciBvZiBkZWdyZWVzIHRvIHJvdGF0ZSB0aGUgeC1heGlzJyBsYWJlbHMuXG5cdHJvdGF0ZV95X2xhYmVsczpSZWFjdC5Qcm9wVHlwZXMuYW55LCAvL1RoZSBudW1iZXIgb2YgZGVncmVlcyB0byByb3RhdGUgdGhlIHktYXhpcycgbGFiZWxzLlxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWV0cmljc0dyYXBoaWNzIl19